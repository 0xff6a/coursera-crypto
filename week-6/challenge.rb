#!/usr/bin/env ruby 
require 'pry'
require 'bigdecimal'
require 'bigdecimal/math'

include BigMath

PRECISION = 350

def factorise(n, a)
  #
  # Given N = pq and A = (p + q)/2 return factors p,q
  #
  # BigDecimal, BigDecimal -> Array[Integer, Integer]
  #
  x = (a**2) - n
  x = x.sqrt(PRECISION)

  p,q = (a - x).to_i, (a + x).to_i
end

def factorise_1(n)
  #
  # Assumes |p − q| < 2N**1/4 thus A − √N < 1
  #
  # BigDecimal -> Array[Integer, Integer]
  #
  a = n.sqrt(PRECISION).ceil
  
  factorise(n, a)
end

def factorise_2(n)
  #
  # Assumes |p − q| < (2**11)*N**1/4 thus A − √N < 2**20
  #
  # BigDecimal -> Array[Integer, Integer]
  #
  range_start = n.sqrt(PRECISION).ceil
  range_end   = range_start + 2**20

  (range_start..range_end).each do |a| 
    p,q = factorise(n, a)

    return [p, q] if (p * q == n)

    puts "#{sprintf('%.2f%%', 100 * (a - range_start)  / (2**20))} complete..." if (a % 10000 == 0)
  end
end

def factorise_3(n)
  #
  # Assumes |3p − 2q| < N**1/4 thus for B = 3p + 2q , B − 2√(6N) < 1 / 8√6)
  # See maths.md for derivations
  #
  # BigDecimal -> Array[Integer, Integer]
  #
  b = ((6*n).sqrt(PRECISION) * 2).ceil

  x = b**2 - 24*n
  x = x.sqrt(PRECISION)

  p = (b - x) / 6
  q = (b + x) / 4

  [ p.to_i, q.to_i ]
end


n_1 = 
  BigDecimal(
    "17976931348623159077293051907890247336179769789423065727343008115" +
    "77326758055056206869853794492129829595855013875371640157101398586" +
    "47833778606925583497541085196591615128057575940752635007475935288" +
    "71082364994994077189561705436114947486504671101510156394068052754" +
    "0071584560878577663743040086340742855278549092581" 
  )

n_2 = 
  BigDecimal(
    "6484558428080716696628242653467722787263437207069762630604390703787" +
    "9730861808111646271401527606141756919558732184025452065542490671989" +
    "2428844841839353281972988531310511738648965962582821502504990264452" +
    "1008852816733037111422964210278402893076574586452336833570778346897" +
    "15838646088239640236866252211790085787877"
  )

n_3 = 
  BigDecimal(
    "72006226374735042527956443552558373833808445147399984182665305798191" +
    "63556901883377904234086641876639384851752649940178970835240791356868" +
    "77441155132015188279331812309091996246361896836573643119174094961348" +
    "52463970788523879939683923036467667022162701835329944324119217381272" +
    "9276147530748597302192751375739387929"
  )

# puts '[+] Question 1'
# puts factorise_1(n_1)
# 13407807929942597099574024998205846127479365820592393377723561443721764030073662768891111614362326998675040546094339320838419523375986027530441562135724301

# puts '[+] Question 2'
# puts factorise_2(n_2)
# 25464796146996183438008816563973942229341454268524157846328581927885777969985222835143851073249573454107384461557193173304497244814071505790566593206419759
# 25464796146996183438008816563973942229341454268524157846328581927885777970106398054491246526970814167632563509541784734741871379856682354747718346471375403

puts '[+] Question 3'
puts factorise_3(n_3)
# 21909849592475533092273988531583955898982176093344929030099423584127212078126150044721102570957812665127475051465088833555993294644190955293613411658629209
# 32864774388713299638410982797375933848473264140017393545149135376190818117189240035825816494954711821626076210364113848440012285863311027426121370050758081
