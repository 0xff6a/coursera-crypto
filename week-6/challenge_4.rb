#!/usr/bin/env ruby 
require 'gmp'
require 'pry'

require_relative 'factoring'
require_relative '../utils/hex'

def hexify(z)
  pad = 
    z.size.even? ? "" : "0"

  pad + z.to_s(16)
end

include GMP

n =
 BigDecimal(
   "17976931348623159077293051907890247336179769789423065727343008115" +
   "77326758055056206869853794492129829595855013875371640157101398586" +
   "47833778606925583497541085196591615128057575940752635007475935288" +
   "71082364994994077189561705436114947486504671101510156394068052754" +
   "0071584560878577663743040086340742855278549092581" 
 )

rsa_e = Z("65537")

ciphertext = 
  Z(
    "220964518674103817763065611348834180174100697878928310717318391436761356001205380042" + 
    "823296504735094243439462197515122564658399679428894607645420405815647489880137348641" +
    "204523252293201764879166664029975091887299716905260832220677716000193292608700095799" +
    "93724077458967773697817571267229951148662959627934791540"
  )

# Get factors of N p,q using the question (1) method
p, q    = factorise_1(n)
n      = Z(n.to_i)
rsa_mod = Z((p - 1) * (q - 1))

# Obtain d using ed = 1 mod Phi(N)
rsa_d = Z(rsa_e.invert(rsa_mod))

# Decrypt ciphertext
pkcs1 = ciphertext.powmod(rsa_d, n)

# Decode from PKCS1
hex       = hexify(pkcs1)
plaintext = hex[hex.index('00'), hex.size]

puts '[+] Plaintext: ' + Hex.to_ascii(plaintext)
